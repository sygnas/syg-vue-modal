{"version":3,"file":"vue-modal.es.js","sources":["../src/defaults.ts","../src/vue-modal.vue"],"sourcesContent":["const vueModalOption = {\n  closeBtnText: 'X',\n  classModal: 'c-modal',\n  classBg: 'c-modal__bg',\n  classSlide: 'c-modal__slide',\n  classContent: 'c-modal__content',\n  classClose: 'c-modal__close-btn',\n  styleBgColor: 'rgba(0, 0, 0, .7)',\n  styleZIndex: 10000,\n};\n\nexport { vueModalOption };\n","<script setup lang=\"ts\">\nimport { defineProps, withDefaults, ref, onMounted, onBeforeMount, onUnmounted } from 'vue';\nimport { vueModalOption } from './defaults';\nimport $style from './modal.module.css';\n\ntype TProps = {\n  opt: {\n    closeBtnText: string;\n    classModal: string;\n    classBg: string;\n    classSlide: string;\n    classContent: string;\n    classClose: string;\n    styleBgColor: string;\n    styleZIndex: number;\n  },\n  handlClose: () => void;\n};\n\nconst props = withDefaults(defineProps<TProps>(), {\n  opt: () => vueModalOption\n});\nconst modalStyle = ref({});\nconst scrollContainer = ref<any>(null);\n\n/**\n * 閉じる\n */\nconst closeModal = () => {\n  if( props.handlClose ){\n    props.handlClose();\n  }\n};\n\n/**\n  * ページ内容が切り替わった時などに指定座標にスクロールさせる。\n  * 基本的には 0 を指定してトップに移動させる。\n  * 親から anime.js などを使ってスムーズにスクロールさせてもよい\n  * 親の this.$refs から this.$refs.modal.scroll(0); のように呼び出す\n  */\nconst scroll = (posY:number, isSmooth=false) => {\n  // if(typeof scrollContainer.value !== Element) return;\n\n  scrollContainer.value.scroll({\n    top: posY,\n    behavior: isSmooth ? 'smooth' : 'instant' as ScrollBehavior,\n  });\n};\n\nonMounted(() => {\n  // css変数を使って背景色と z-index を制御\n  modalStyle.value = {\n    '--modal--bg-color': props.opt.styleBgColor,\n    '--modal--z-index': props.opt.styleZIndex,\n  };\n  // console.log(\"option\", props.opt);\n});\n\n// マウント前後に <body> のスクロールを止める\nonBeforeMount(() => {\n  document.body.style.overflow = 'hidden';\n});\n\nonUnmounted(() => {\n  document.body.style.overflow = 'auto';\n});\n\n</script>\n\n\n////////////////////////////////////////////////////////////////////////////////\n\n<template>\n  <teleport to=\"body\">\n    <div :class=\"[$style.modal, props.opt.classModal]\" :style=\"modalStyle\">\n      <!-- 背景 -->\n      <span :class=\"[$style.modal__bg, props.opt.classBg]\"></span>\n\n      <!-- overflow:auto でスクロールバーを右端に表示するためのラッパー -->\n      <div :class=\"[$style.modal__slide, props.opt.classSlide]\" @click.prevent=\"closeModal\" ref=\"scrollContainer\">\n\n        <!-- 実際のコンテンツ幅を定義するためのコンテナ -->\n        <div :class=\"[$style.modal__content, props.opt.classContent]\" @click.stop=\"\">\n          <slot></slot>\n        </div>\n\n      </div>\n\n      <!-- 閉じるボタン -->\n      <button\n        :class=\"[$style.modal__close_btn, props.opt.classClose]\"\n        @click.prevent=\"closeModal\"\n        v-html=\"props.opt.closeBtnText\"\n      ></button>\n    </div>\n  </teleport>\n</template>\n"],"names":[],"mappings":";;AAAA,MAAM,cAAiB,GAAA;AAAA,EACrB,YAAc,EAAA,GAAA;AAAA,EACd,UAAY,EAAA,SAAA;AAAA,EACZ,OAAS,EAAA,aAAA;AAAA,EACT,UAAY,EAAA,gBAAA;AAAA,EACZ,YAAc,EAAA,kBAAA;AAAA,EACd,UAAY,EAAA,oBAAA;AAAA,EACZ,YAAc,EAAA,mBAAA;AAAA,EACd,WAAa,EAAA,GAAA;AACf;;;;;;;;;;;;;;;;;;;;;;;;ACaA,IAAM,MAAA,UAAA,GAAa,GAAI,CAAA,EAAE,CAAA,CAAA;AACzB,IAAM,MAAA,eAAA,GAAkB,IAAS,IAAI,CAAA,CAAA;AAKrC,IAAA,MAAM,aAAa,MAAM;AACvB,MAAA,IAAI,MAAM,UAAY,EAAA;AACpB,QAAA,KAAA,CAAM,UAAW,EAAA,CAAA;AAAA,OACnB;AAAA,KACF,CAAA;AAiBA,IAAA,SAAA,CAAU,MAAM;AAEd,MAAA,UAAA,CAAW,KAAQ,GAAA;AAAA,QACjB,mBAAA,EAAqB,MAAM,GAAI,CAAA,YAAA;AAAA,QAC/B,kBAAA,EAAoB,MAAM,GAAI,CAAA,WAAA;AAAA,OAChC,CAAA;AAAA,KAED,CAAA,CAAA;AAGD,IAAA,aAAA,CAAc,MAAM;AAClB,MAAS,QAAA,CAAA,IAAA,CAAK,MAAM,QAAW,GAAA,QAAA,CAAA;AAAA,KAChC,CAAA,CAAA;AAED,IAAA,WAAA,CAAY,MAAM;AAChB,MAAS,QAAA,CAAA,IAAA,CAAK,MAAM,QAAW,GAAA,MAAA,CAAA;AAAA,KAChC,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}