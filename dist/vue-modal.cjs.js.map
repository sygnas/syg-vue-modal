{"version":3,"file":"vue-modal.cjs.js","sources":["../src/useModalControl.ts","../src/VueModal.vue"],"sourcesContent":["import { ref, computed, watch } from \"vue\";\nimport { TControlOption, IRef } from \"./types\";\n\ntype TElementRef = IRef<HTMLElement | null>;\n\ntype TModalState = {\n  id: string;\n  isOpen: boolean;\n  scrollContainer?: TElementRef | HTMLElement;\n  // scrollContainer?: HTMLElement;\n};\n\n// モーダルステート一覧を格納\nconst modals = ref<TModalState[]>([]);\n\n/**\n * モーダルステートを取得\n * 存在しなければ新規に登録したものを返す\n */\nconst $_getModalState = (id: string): TModalState => {\n  let modalState: TModalState | undefined = modals.value.find(\n    (modal) => modal.id === id\n  );\n  if (modalState) return modalState;\n\n  modals.value.push({\n    id,\n    isOpen: false,\n    scrollContainer: undefined,\n  });\n  return modals.value.find((modal) => modal.id === id) as TModalState;\n};\n\n/**\n * モーダルコントローラー\n * @param id モーダルid\n * @param opt onOpen / onClose を指定\n */\nconst useModalControl = (id: string, opt?: TControlOption) => {\n  const $_modalState = $_getModalState(id);\n\n  // 開いているか\n  const isOpen = computed<boolean>(() => $_modalState.isOpen);\n\n  // 開いているかを監視して、設定されたメソッドを実行する\n  watch(isOpen, (isOpenNext: boolean) => {\n    if (isOpenNext && opt && opt.onOpen !== undefined) {\n      opt.onOpen($_modalState.id);\n    } else if (!isOpenNext && opt && opt.onClose !== undefined) {\n      opt.onClose($_modalState.id);\n    }\n  });\n\n  /**\n   * モーダルを開く\n   * <body> のスクロールを止める\n   */\n  const open = () => {\n    $_modalState.isOpen = true;\n    document.body.style.overflow = \"hidden\";\n  };\n\n  /**\n   * モーダルを閉じる\n   * <body> のスクロールを戻す\n   */\n  const close = () => {\n    $_modalState.isOpen = false;\n    document.body.style.overflow = \"auto\";\n  };\n\n  /**\n   * スクロールコンテナを登録\n   */\n  const setScrollContainer = (scrollContainer: TElementRef) => {\n    $_modalState.scrollContainer = scrollContainer;\n  };\n\n  /**\n   * 指定座標にスクロールさせる\n   * @param posY 座標\n   * @param isSmooth スムーススクロールさせるなら true\n   * @returns スクロール成功 true / 失敗 false\n   */\n  const scroll = (posY: number, isSmooth: boolean = false): boolean => {\n    // ref() 内の ref() オブジェクトにアクセスするとなぜかアンラップされるので、ここでは HTMLElement として取り出される\n    const container = $_modalState.scrollContainer as HTMLElement;\n\n    if (!container) return false;\n\n    container.scroll({\n      top: posY,\n      behavior: isSmooth ? \"smooth\" : (\"instant\" as ScrollBehavior),\n    });\n    return true;\n  };\n\n  return { open, close, scroll, setScrollContainer, isOpen };\n};\n\nexport { useModalControl };\n","<script setup lang=\"ts\">\nimport { defineProps, ref, computed, StyleValue } from \"vue\";\nimport { useModalControl } from \"./useModalControl\";\nimport $style from \"./modal.module.css\";\nimport { TModalOption } from \"./types\";\n\ntype TProps = {\n  id: string;\n  option: TModalOption;\n};\n\n// モーダルのデフォルトオプション\nconst defaultOption: TModalOption = {\n  closeBtnText: \"X\",\n  classModal: \"c-modal\",\n  classBg: \"c-modal__bg\",\n  classSlide: \"c-modal__slide\",\n  classContent: \"c-modal__content\",\n  classClose: \"c-modal__close-btn\",\n  styleBgColor: \"rgba(0, 0, 0, .7)\",\n  styleZIndex: 10000,\n  transitionBaseName: \"syg-modal-fade\",\n};\n\n// プロパティ\n// モーダルオプションはデフォルト値とマージ\nconst props = defineProps<TProps>();\nconst opt = computed<TModalOption>(() => {\n  return Object.assign({}, defaultOption, props.option);\n});\n\n// css変数を使って背景色と z-index を制御\nconst modalStyle = ref({});\nmodalStyle.value = {\n  \"--modal--bg-color\": opt.value.styleBgColor,\n  \"--modal--z-index\": opt.value.styleZIndex,\n}\n\n// スクロールコンテナ`slide`、内容物コンテナ`content`\nconst scrollContainer = ref<HTMLElement | null>(null);\nconst contentContainer = ref<HTMLElement | null>(null);\n\n/**\n * 内容物の align 変更\n * `slide`より`content`が大きいと align-items:flex-start、それ以外は center にする\n */\nconst changeAlignItems = () => {\n  const scrollCon = scrollContainer.value;\n  const contentCon = contentContainer.value;\n\n  if (scrollCon === null || contentCon === null) return;\n\n  if (scrollCon.clientHeight < contentCon.clientHeight) {\n    scrollCon.style.alignItems = \"flex-start\";\n  } else {\n    scrollCon.style.alignItems = \"center\";\n  }\n};\n\n\n/**\n * モーダル制御と、内容高さチェックの setInterval\n */\nlet intervalId: number = 0;\n\nconst modalControl = useModalControl(props.id, {\n  onOpen: (id: string) => {\n    modalControl.setScrollContainer(scrollContainer);\n    setTimeout(changeAlignItems, 50);\n    intervalId = setInterval(changeAlignItems, 500);\n  },\n  onClose: (id: string) => {\n    clearInterval(intervalId);\n  },\n});\n\n// モーダルが開いているか\nconst isOpen = computed<boolean>(() => modalControl.isOpen.value);\n\n/**\n * 閉じる\n */\nconst closeModal = () => {\n  modalControl.close();\n};\n</script>\n\n////////////////////////////////////////////////////////////////////////////////\n\n<template>\n  <teleport to=\"body\">\n    <transition :name=\"opt.transitionBaseName\">\n      <div\n        v-if=\"isOpen\"\n        :class=\"[$style.modal, opt.classModal]\"\n        :style=\"modalStyle\"\n      >\n        <!-- 背景 -->\n        <span\n          :class=\"[$style.modal__bg, opt.classBg]\"\n          @click=\"closeModal\"\n        ></span>\n\n        <!-- overflow:auto でスクロールバーを右端に表示するためのラッパー -->\n        <div\n          :class=\"[$style.modal__slide, opt.classSlide]\"\n          @click=\"closeModal\"\n          ref=\"scrollContainer\"\n        >\n          <!-- 実際のコンテンツ幅を定義するためのコンテナ -->\n          <div\n            :class=\"[$style.modal__content, opt.classContent]\"\n            @click.stop=\"\"\n            ref=\"contentContainer\"\n          >\n            <slot></slot>\n          </div>\n        </div>\n\n        <!-- 閉じるボタン -->\n        <button\n          :class=\"[$style.modal__close_btn, opt.classClose]\"\n          @click=\"closeModal\"\n          v-html=\"opt.closeBtnText\"\n        ></button>\n      </div>\n    </transition>\n  </teleport>\n</template>\n\n////////////////////////////////////////////////////////////////////////////////\n\n<style>\n.syg-modal-fade-leave-active,\n.syg-modal-fade-enter-active {\n  transition: 0.5s;\n}\n.syg-modal-fade-leave-to,\n.syg-modal-fade-enter-from {\n  opacity: 0;\n}\n.syg-modal-fade-leave-from,\n.syg-modal-fade-enter-to {\n  opacity: 1;\n}\n</style>\n"],"names":["ref","computed","watch"],"mappings":"iIAaA,KAAM,GAASA,EAAAA,IAAmB,CAAA,CAAE,EAM9B,EAAkB,AAAC,GAA4B,CAC/C,GAAA,GAAsC,EAAO,MAAM,KACrD,AAAC,GAAU,EAAM,KAAO,CAC1B,EACI,MAAA,IAEJ,GAAO,MAAM,KAAK,CAChB,KACA,OAAQ,GACR,gBAAiB,MAAA,CAClB,EACM,EAAO,MAAM,KAAK,AAAC,GAAU,EAAM,KAAO,CAAE,EACrD,EAOM,EAAkB,CAAC,EAAY,IAAyB,CACtD,KAAA,GAAe,EAAgB,CAAE,EAGjC,EAASC,EAAA,SAAkB,IAAM,EAAa,MAAM,EAGpDC,eAAA,EAAQ,AAAC,GAAwB,CACrC,AAAI,GAAc,GAAO,EAAI,SAAW,OAClC,EAAA,OAAO,EAAa,EAAE,EACjB,CAAC,GAAc,GAAO,EAAI,UAAY,QAC3C,EAAA,QAAQ,EAAa,EAAE,CAC7B,CACD,EA8CM,CAAE,KAxCI,IAAM,CACjB,EAAa,OAAS,GACb,SAAA,KAAK,MAAM,SAAW,QAAA,EAsClB,MA/BD,IAAM,CAClB,EAAa,OAAS,GACb,SAAA,KAAK,MAAM,SAAW,MAAA,EA6BX,OAbP,CAAC,EAAc,EAAoB,KAAmB,CAEnE,KAAM,GAAY,EAAa,gBAE/B,MAAK,GAEL,GAAU,OAAO,CACf,IAAK,EACL,SAAU,EAAW,SAAY,SAAA,CAClC,EACM,IANgB,EAMhB,EAGqB,mBAvBH,AAAC,GAAiC,CAC3D,EAAa,gBAAkB,CAAA,EAsBiB,QAAO,CAC3D,4SCtFM,EAA8B,CAClC,aAAc,IACd,WAAY,UACZ,QAAS,cACT,WAAY,iBACZ,aAAc,mBACd,WAAY,qBACZ,aAAc,oBACd,YAAa,IACb,mBAAoB,gBAAA,EAMhB,EAAMD,EAAAA,SAAuB,IAC1B,OAAO,OAAO,CAAA,EAAI,EAAe,EAAM,MAAM,CACrD,EAGK,EAAaD,MAAI,CAAA,CAAE,EACzB,EAAW,MAAQ,CACjB,oBAAqB,EAAI,MAAM,aAC/B,mBAAoB,EAAI,MAAM,WAAA,EAI1B,KAAA,GAAkBA,MAAwB,IAAI,EAC9C,EAAmBA,MAAwB,IAAI,EAM/C,EAAmB,IAAM,CAC7B,KAAM,GAAY,EAAgB,MAC5B,EAAa,EAAiB,MAEhC,AAAA,IAAc,MAAQ,IAAe,MAErC,CAAA,EAAU,aAAe,EAAW,aACtC,EAAU,MAAM,WAAa,aAE7B,EAAU,MAAM,WAAa,SAC/B,EAOF,GAAI,GAAqB,EAEnB,KAAA,GAAe,EAAgB,EAAM,GAAI,CAC7C,OAAQ,AAAC,GAAe,CACtB,EAAa,mBAAmB,CAAe,EAC/C,WAAW,EAAkB,EAAE,EAClB,EAAA,YAAY,EAAkB,GAAG,CAChD,EACA,QAAS,AAAC,GAAe,CACvB,cAAc,CAAU,CAC1B,CAAA,CACD,EAGK,EAASC,EAAAA,SAAkB,IAAM,EAAa,OAAO,KAAK,EAK1D,EAAa,IAAM,CACvB,EAAa,MAAM,CAAA"}